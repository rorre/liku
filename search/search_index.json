{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Liku is a library to render HTML, inspired by modern Web Development.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>Install the package first!: <code>pip install liku</code></li> <li>Start working by importing the library: <code>import liku as e</code></li> <li>Write your components! See example below</li> </ul>"},{"location":"#simple-component","title":"Simple Component","text":"<pre><code>import liku as e\n\ndef Card(title: str, description: str):\n    return e.div(\n        props={\"class_\": \"rounded-md border p-4\"},\n        children=[\n            e.strong(children=title),\n            e.p(children=description),\n        ],\n    )\n\nprint(Card(\"Hello\", \"world!\"))\n# &lt;div class=\"rounded-md border p-4\"&gt;&lt;strong &gt;Hello&lt;/strong&gt;&lt;p &gt;world!&lt;/p&gt;&lt;/div&gt;\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Python: It literally is just Python, everything is represented in Python</li> <li>Statically Typed: Every single component is statically typed, even the props/attributes</li> <li>Zero dependencies: Unless you add integrations support, there is no added dependencies whatsoever</li> <li>Fast: There is no I/O logic, just traversing through the tree (benchmark soon)</li> </ul>"},{"location":"#optional-dependencies","title":"Optional Dependencies","text":"<ul> <li><code>liku[flask]</code>: Flask &gt;= 1.1.0, &lt; 4.0. Essentially all stable versions</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>Examples available at examples directory</p>"},{"location":"html-in-python/","title":"HTML in Python","text":"<p>Experimental Feature</p> <p>This feature is new and experimental. You may use this, but expect a lot of weirdness. If you find any issue, feel free to report to GitHub Issues</p> <p>This is an alternative mode to write liku components. While using declarative mode works to define components, it can be very overwhelming real quick, as well as not being very easy to read as the component grows bigger and bigger. This mode fixes that issue by writing your component in HTML, while maintaining templating engine features, much like JSX.</p>"},{"location":"html-in-python/#prerequisite","title":"Prerequisite","text":"<p>This feature requires <code>lxml</code> to be installed. To install the supported version, install the package with <code>htm</code> extras:</p> <pre><code>pip install git+https://github.com/rorre/liku.git@main[htm]\n</code></pre>"},{"location":"html-in-python/#visual-studio-code-extension","title":"Visual Studio Code Extension","text":"<p>To aid developers on developing their app with Liku with HTML in Python mode, this extension for Visual Studio Code exist. Currently, there is no ETA to release on marketplace, but you may see the code and compile it yourself here.</p> Extension in action <p>Features:</p> <ul> <li>Completion on component names</li> <li>Completion on props</li> <li>Completion on <code>{{ expression }}</code> directive</li> <li>Completion on programmatic value props</li> </ul> <p>However, there are a lot of caveats:</p> <ul> <li>You must use triple backtick inside <code>html()</code> for the completion to work.</li> <li>All completions are taken on all scopes. This means other function's locals will also be included.</li> <li>No check for already filled in props. This means you might be suggested already filled props.</li> <li>No semantic tokens. (aka syntax highlighting)</li> <li>No type checks/linting.</li> </ul> <p>If you are using other editor, you may make use of the LSP inside <code>bundled/tools</code> directory.</p>"},{"location":"html-in-python/#feature-overview","title":"Feature Overview","text":"<p>Below is the code that we'll learn in this article. We'll explain all the features of across the following sections. In general, all the html code will be done in a <code>html()</code> call, that can be imported from <code>liku.htm</code></p> <pre><code>from liku.htm import html\n\ndef Card(name: str, image: str | None):\n    compact = image is None\n    if compact:\n        return html(\n          \"\"\"\n          &lt;div class=\"card card-compact\"&gt;\n              &lt;p&gt;{{ name }}&lt;/p&gt;\n          &lt;/div&gt;\n          \"\"\"\n        )\n    return html(\n        \"\"\"\n        &lt;div class=\"card\"&gt;\n            &lt;img :src=\"image\" class=\"card-image\" /&gt;\n            &lt;p&gt;{{ name }}&lt;/p&gt;\n        &lt;/div&gt;\n        \"\"\"\n    )\n\ndef PeopleList(people: list[tuple[str, str | None]]):\n    children = list(map(lambda p: html(\"\"\"&lt;Card :name=\"p[0]\" :image=\"p[1]\" /&gt;\"\"\"), people))\n    # The following also works\n    # children = list(map(lambda p: Card(p[0], p[1]), people))\n\n    return html(\n        \"\"\"\n        &lt;div class=\"grid grid-cols-3 gap-2\"&gt;\n            {{ children }}\n        &lt;/div&gt;\n        \"\"\"\n    )\n\npeople = [\n  (\"Ren\", \"https://avatars.githubusercontent.com/u/6541445?v=4\"),\n  (\"Linus\", None)\n]\nprint(html(\n    \"\"\"\n    &lt;PeopleList :people=\"people /&gt;\n    \"\"\"\n))\n</code></pre>"},{"location":"html-in-python/#writing-components","title":"Writing Components","text":"<p>A component is simply a function returning either a liku HTML element, a string, or <code>None</code>. You may also return a list of any of the types mentioned earlier. To accomodate type check, you can import <code>HTMLNode</code> from <code>liku.elements</code>.</p> <pre><code>from liku.htm import html\n\ndef Example():\n    return html(\"\"\"&lt;p&gt;Hello world!&lt;/p&gt;\"\"\")\n\nprint(html(\"\"\"&lt;Example /&gt;\"\"\")) # This will output &lt;p&gt;Hello world!&lt;/p&gt;\n</code></pre> <p>When parsing your html, Liku will look through all your scoped variables, and call the function accordingly.</p> <p>Multiword Components</p> <p>If your component has multiple word in the function name (such as <code>example_component()</code>), you can use <code>example-component</code> as well as <code>example_component</code> as the tag name. However, you should stick with snake case.</p>"},{"location":"html-in-python/#using-python-expression","title":"Using Python Expression","text":"<p>Just like other templating engine, you are able to inject expression to print into the final HTML. In Liku, this is done using <code>{{ expression }}</code> directive.</p> <p>Danger</p> <p>This feature makes use of <code>eval()</code>. Please make sure all the expression are safe. Do not run user provided strings.</p> <pre><code>from liku.htm import html\n\ndef Greet():\n    name = \"Liku\"\n    return html(\"\"\"&lt;p&gt;Hello, {{ name }}!&lt;/p&gt;\"\"\")\n\nprint(html(\"\"\"&lt;Greet /&gt;\"\"\")) # This will output &lt;p&gt;Hello, Liku!&lt;/p&gt;\n</code></pre> <p>Liku will parse the html, find the directive and run the expression inside the directive. It will then replace the directive with the result of the expression.</p>"},{"location":"html-in-python/#passing-props","title":"Passing Props","text":"<p>All positional and keyword arguments are props in liku, excluding variable arguments. Therefore, all keys must be the variable name of the function, and the value will be passed to the function call.</p> <pre><code>from liku.htm import html\n\ndef Greet(name: str):\n    return html(\"\"\"&lt;p&gt;Hello, {{ name }}!&lt;/p&gt;\"\"\")\n\nprint(html(\"\"\"&lt;Greet name=\"Liku\" /&gt;\"\"\")) # This will output &lt;p&gt;Hello, Liku!&lt;/p&gt;\n</code></pre> <p>Info</p> <p>You do not need type hints, but it would be best if you could.</p> <p>Internally, liku will convert all props into a dict object, then spread it in the function call. For example, the previous example will call the function like so: <code>Greet(**{\"name\": \"Liku\"})</code>, which is essentially the same as calling <code>Greet(name=\"Liku\")</code>. Therefore, the props order does not matter.</p>"},{"location":"html-in-python/#catch-all-props","title":"Catch-all Props","text":"<p>Sometimes you might need extra props that you don't care to list on. Maybe because there is too much, or you simply just want to pass it to child or have special handling. You can do so using variable keyword arguments.</p> <pre><code>from liku.htm import html\nimport liku as e\n\ndef ExampleForward(name: str, **kwargs: object):\n    return e.p(\n        props=kwargs,\n        children=[\n          f\"Hello, {name}!\"\n        ]\n    )\n\nprint(html(\"\"\"&lt;ExampleForward name=\"Liku\" class=\"font-bold\" /&gt;\"\"\")) # This will output &lt;p class=\"font-bold\"&gt;Hello, Liku!&lt;/p&gt;\n</code></pre>"},{"location":"html-in-python/#programmatic-value","title":"Programmatic Value","text":"<p>Danger</p> <p>This feature makes use of <code>eval()</code>. Please make sure all the expression are safe. Do not run user provided strings.</p> <p>There are times where you might want the value of a prop be based on a variable or other data. You may do so by prepending the key of the prop with a colon (<code>:</code>), and let the value be a Python expression.</p> <pre><code>from liku.htm import html\n\ndef Greet(name: str):\n    return html(\"\"\"&lt;p&gt;Hello, {{ name }}!&lt;/p&gt;\"\"\")\n\nuser_name = \"Liku\"\nprint(html(\"\"\"&lt;Greet :name=\"user_name\" /&gt;\"\"\")) # This will output &lt;p&gt;Hello, Liku!&lt;/p&gt;\n</code></pre> <p>Internally, Liku will parse through the props and run <code>eval()</code> on all of the value in such props.</p>"},{"location":"html-in-python/#control-flow","title":"Control Flow","text":"<p>Outputting conditionally and looping through a list is a common problem during generation. You are encouraged to split this logic outside of the <code>html()</code> call, as Liku itself does not have any logic of conditional and recursion.</p> <p>One way to achieve this is as follows:</p> <pre><code>from dataclasses import dataclass\nfrom liku.htm import html\n\n@dataclass\nclass GroceryItem:\n    name: str\n    finished: bool\n\ndef Grocery(item: GroceryItem):\n    # Run looping outside of html, saving the result...\n    if item.finished:\n        suffix = \"(OK)\"\n    else:\n        suffix = html(\"\"\"&lt;button&gt;Finish&lt;/button&gt;\"\"\")\n\n    # ... then embed the result\n    return html(\"\"\"&lt;li&gt;{{ item.name }} {{ suffix }}&lt;/li&gt;\"\"\")\n\ndef GroceriesList(items: list[GroceryItem]):\n    # Run looping outside of html, saving the result...\n    items_html = list(map(Grocery, items))\n    return html(\n        # ... then embed the result\n        \"\"\"\n        &lt;ul&gt;{{ items_html }}&lt;/ul&gt;\n        \"\"\"\n    )\n\nprint(\n    GroceriesList(\n        [\n            GroceryItem(\"Sample\", True),\n            GroceryItem(\"Sample 2\", False),\n        ]\n    )\n)\n</code></pre>"},{"location":"motivation/","title":"Motivation","text":"<p>Templating engine always uses some sort of custom format, whether it be Jinja, Django's templating, or anything else. These are powerful tools, but after going back from the time where I keep writing React code, something clicks in me: \"I like extending JS with HTML\". So, I decided to do just that in this library.</p> <p>The benefit of this project is that I have the full power of Python, while still being able to reflect my front-end code at the same time. This way, not only I can benefit from Python's LSP, I have full control of what is executed, so integrating with database is easier.</p> <p>The ideas are as follows:</p> <ul> <li>Allow full LSP and typed nature of representing HTML</li> <li>Easily compose components into each own function (very useful for maintainability, and with HTMX on the rise, this makes even more sense)</li> <li>Keep library as simple as possible</li> </ul>"},{"location":"motivation/#future","title":"Future","text":"<p>Considering there is already the equivalent of <code>h()</code> function in JS ecosystem, there is a plan to write own JSX system in Python, hopefully with LSP support as well. This would mean that both HTML and Python can be very easily represented in the same space, making SSR rendered apps more powerful to use and less of a headache to manage.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#html-injection-attacks","title":"HTML Injection Attacks","text":"<p>Liku is designed to be secure, having the code really simple is part of the effort to make it secure as well.</p> <p>Every single node that is NOT a liku component will always be escaped using Python's <code>html.escape()</code> function. These includes children and props/attributes values. Props key are not escaped.</p> <p>For instance, take a look at the following component:</p> <pre><code>e.div(\n    props={\"class_\": \"mx-auto container\"},\n    children=[\n        e.img(props={\"src\": '\"onload=\"alert(1)\"'}),\n        e.p(children='&lt;img src=\"\" onerror=\"alert(99)\" /&gt;')\n    ]\n)\n</code></pre> <p>Liku will generate the following HTML code:</p> <pre><code>&lt;div class=\"mx-auto container\"&gt;\n    &lt;img src=\"&amp;quot;onload=&amp;quot;alert(1)&amp;quot;\"&gt;&lt;/img&gt;\n    &lt;p&gt;&amp;lt;img src=&amp;quot;&amp;quot; onerror=&amp;quot;alert(99)&amp;quot; /&amp;gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>The <code>safe=True</code> parameter can be used to mark the children as safe to render, and is not going to be escaped. Currently, there is no way to mark props value as safe.</p> <p>For instance, for the same component:</p> <pre><code>e.div(\n    props={\"class_\": \"mx-auto container\"},\n    children=[\n        e.img(props={\"src\": '\"onload=\"alert(1)\"'}, safe=True),\n        e.p(children='&lt;img src=\"\" onerror=\"alert(99)\" /&gt;', safe=True)\n    ]\n)\n</code></pre> <p>Liku will generate the following HTML:</p> <pre><code>&lt;div class=\"mx-auto container\"&gt;\n    &lt;img src=\"&amp;quot;onload=&amp;quot;alert(1)&amp;quot;\"&gt;&lt;/img&gt;\n    &lt;p&gt;&lt;img src=\"\" onerror=\"alert(99)\" /&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"security/#security-tips","title":"Security Tips","text":"<ul> <li>Only use <code>safe=True</code> sparsely. In general, if you do not need to mark it as safe, keep it as default (False).</li> <li>Avoid giving children to <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tag. By default, these childrens will also be escaped, so they will not be able   to execute properly in the first place. Your only option is to consciously set <code>safe=True</code>, which is not recommended. You should use   a separate <code>.css</code> or <code>.js</code> file to run them.</li> <li>Avoid using <code>on*</code> handlers. They might be fine if you hardcode the value, but setting the value dynamically is a no-go. Despite   attempts of escaping via <code>html.escape()</code>, they could still pass through. For example: <code>alert(document.cookie)</code> will still execute correctly,   since <code>html.escape()</code> does not escape the brackets.</li> </ul>"},{"location":"tailwindcss/","title":"Tailwind CSS","text":"<p>Tailwind CSS is a utility-first CSS framework for rapidly building modern websites without ever leaving your HTML.</p>"},{"location":"tailwindcss/#setting-up","title":"Setting Up","text":"<p>Setting up Tailwind CSS for your project inherently depends on your web framework, notably where your CSS static files will be. However, I will provide an example set up guide for you to have a base on. Ensure you have Node.js installed or the standalone CLI installed in your PATH.</p> <p>Note</p> <p>This guide assumes:</p> <ul> <li>Your Python source code is in a folder called <code>app</code></li> <li>Your input CSS file at <code>app/css/base.css</code></li> <li>Your static directory is at <code>app/static</code></li> <li>The output file will be at <code>app/static/style.css</code></li> </ul> <ol> <li>Install Tailwind CSS    <pre><code>npm install -D tailwindcss  # Skip if you already use the CLI\nnpx tailwindcss init  # Use just tailwindcss if you use CLI\n</code></pre></li> <li>Inside <code>tailwind.config.js</code>, add your Python source code directory to <code>content</code> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./app/**/*.{py,html,js}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre></li> <li>Add Tailwind CSS directives to your input CSS file    <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre></li> <li>Start Tailwind CLI build    <pre><code># Use just tailwindcss if you use CLI\nnpx tailwindcss -i ./app/css/base.css -o ./app/static/style.css --watch\n</code></pre></li> <li>If you are using Visual Studio Code, follow next steps to get Intellisense working</li> </ol>"},{"location":"tailwindcss/#code-configuration","title":"Code Configuration","text":"<p>Because Liku is not using HTML syntax, Tailwind CSS Intellisense does not work as expected. To fix this, add the following custom regex rule for Tailwind CSS plugin in your Code config:</p> settings.json<pre><code>{\n  \"tailwindCSS.experimental.classRegex\": [\n    \"[\\\"']class_[\\\"'] *: *[\\\"']([^\\\"']*)\",\n  ]\n}\n</code></pre>"},{"location":"quickstart/components/","title":"Creating Liku Component","text":"<p>To create a Liku component, you need to have the library installed. Follow the installation guide to get started.</p>"},{"location":"quickstart/components/#overview","title":"Overview","text":"<p>A Liku component is just an instance of an abstract class named <code>HTMLElement</code>. In general, you would not need to extend this class, as Liku already provide all wrappers for every single HTML node available in <code>liku</code> namespace.</p> <p>Each <code>HTMLElement</code> has two arguments in its class init: <code>props</code> and <code>children</code>. <code>props</code> is the attributes for that HTML tag. It is the same concept as the one in React/Vue/Solid encosystem. <code>children</code> is the child HTML nodes of that attribute, that is the elements between the opening and closing tag.</p> <p>For example, take a look at the HTML code below:</p> <pre><code>&lt;div class=\"mx-auto container\"&gt;\n  &lt;p&gt;Hello world!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>In the case for <code>&lt;div&gt;</code> tag, <code>class=\"mx-auto container\"</code> is the <code>props</code>, and <code>&lt;p&gt;Hello world!&lt;/p&gt;</code> is the children.</p> <p>Note</p> <p>Some props would have <code>_</code> prefix, this is because it conflicts with Python keyword, so adding <code>_</code> is necessary to avoid Python syntax errors.</p>"},{"location":"quickstart/components/#creating","title":"Creating","text":"<p>To create a new component, simply call the html tag that you want, and provide in the props and children. Let's try to convert the above example to how Liku would represent it:</p> <pre><code>import liku as e\n\ncontainer = e.div(\n    props={\"class_\": \"mx-auto container\"}\n    children=[\n        e.p(children=\"Hello world!\")\n    ]\n)\nprint(container)\n</code></pre>"},{"location":"quickstart/components/#composability-through-functions","title":"Composability through functions","text":"<p>The component code can grow really big as your page or component grow much bigger, and with the default of PEP8 to use 4 spaces, it can get really stretched horizontally really quick! So, it is wise for you to be able to compose your components into multiple separate components.</p> <p>Making functional components is just like how you would in React or Solid, you create a function, have the arguments as its props, then return the html component. To use the component, simply call the functional component and pass it to the parent component's children. Very simple, isn't it?</p> <p>Let's make a component just like this one:</p> <p>Here is the HTML code for the component:</p> <pre><code>&lt;div class=\"bg-white rounded-md border flex flex-row gap-16 py-4 px-8 max-w-lg\"&gt;\n  &lt;div class=\"flex flex-col gap-4 items-center justify-center flex-none\"&gt;\n    &lt;img\n      src=\"https://avatars.githubusercontent.com/u/6541445?v=4\"\n      class=\"rounded-full w-32 aspect-square\"\n    /&gt;\n    &lt;p&gt;Ren&lt;/p&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"flex flex-col gap-2 justify-between py-8\"&gt;\n    &lt;p class=\"font-light\"&gt;\n      Local cat meowing at terminal. I love other cats too!\n    &lt;/p&gt;\n\n    &lt;div class=\"grid grid-cols-2\"&gt;\n      &lt;a class=\"text-blue-500 underline\"&gt;Twitter&lt;/a&gt;\n      &lt;a class=\"text-blue-500 underline\"&gt;GitHub&lt;/a&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Let's split this into 3 components: Card, UserPreview, UserDetails</p> <pre><code>import liku as e\nfrom dataclasses import dataclass\n\n@dataclass\nclass User:\n    avatar: str\n    name: str\n    bio: str\n    socials: dict[str, str]\n\ndef UserPreview(avatar: str, name: str):\n    return e.div(\n        props={\"class_\": \"flex flex-col gap-4 items-center justify-center flex-none\"},\n        children=[\n            e.img(props={\n                \"src\": avatar,\n                \"class_\": \"rounded-full w-32 aspect-square\"\n            }),\n            e.p(children=name),\n        ]\n    )\n\ndef UserDetails(bio: str, socials: dict[str, str]):\n    return e.div(\n        props={\"class_\": \"flex flex-col gap-2 justify-between py-8\"},\n        children=[\n            e.p(\n                props={\"class_\": \"font-light\"},\n                children=bio\n            ),\n\n            e.div(\n                props={\"class_\": \"grid grid-cols-2\"},\n                children=[\n                    e.a(\n                        props={\"href\": link, \"class_\": \"text-blue-500 underline\"},\n                        children=social\n                    ) for social, link in socials.items()\n                ]\n            )\n        ]\n    )\n\ndef Card(user: User):\n    return e.div(\n        props={\"class_\": \"bg-white rounded-md border flex flex-row gap-16 py-4 px-8 max-w-lg\"},\n        children=[\n            UserPreview(user.avatar, user.name),\n            UserDetails(user.bio, user.socials)\n        ]\n    )\n\nren = User(\n    avatar=\"https://avatars.githubusercontent.com/u/6541445?v=4\",\n    name=\"Ren\",\n    bio=\"Local cat meowing at terminal. I love other cats too!\",\n    socials={\n        \"Twitter\": \"https://twitter.com\",\n        \"GitHub\": \"https://github.com/rorre\"\n    }\n)\n\nprint(Card(ren))\n</code></pre> <p>As you can see, it is much more maintainable and easily customizable now that it has been splitted.</p> <p>Now that you know how to build components, continue on how to integrate Liku to web frameworks in the next page.</p>"},{"location":"quickstart/context/","title":"Passing State Deeply","text":"<p>In most cases, you only need to pass state between 2 components. However, there are cases where you need to either:</p> <ol> <li>Pass state to components deep in the tree</li> <li>Pass state to many different components, that could be both close and far away in the tree</li> </ol> <p>Of course, you would still be able to achieve this by passing through props from one another, but this would cause you to type in the state for every single component through the tree via props, which we call \"prop drilling\". To avoid this, liku provides the same solution as what React does: using Context.</p> <p>Context does this by providing data for all children components that are below it. Any child component below the context provider will be able to get the current data using <code>use_context()</code> function. Therefore, all data can be retrieved freely as long as there is a context object that is providing the value.</p> <p>In general, context works just like this:</p> <ol> <li>Create the context object, optionally with a default value</li> <li>Provide the value of the context with <code>context.provide()</code> context manager (using <code>with</code> statement)</li> <li>Use the value in child components</li> </ol> <p>Let's see the example code:</p> context_demo.py<pre><code>from dataclasses import dataclass\nimport liku as e\nfrom liku.context import Context, use_context\n\n\n@dataclass\nclass User:\n    name: str\n    age: int\n    role: str\n\n\nUserContext = Context(\"user\")\n\n\ndef Profile():\n    user = use_context(UserContext)\n\n    return e.div(\n        props={\"class_\": \"flex flex-col gap-2\"},\n        children=[\n            e.p(children=str(user.age)),\n            e.p(children=user.role),\n            e.p(children=user.name),\n        ],\n    )\n\n\ndef Index():\n    with UserContext.provide(User(name=\"Ren\", age=20, role=\"admin\")):\n        return e.main(children=Profile())\n\n\nprint(Index())\n</code></pre> <p>Of course, this example don't really look very realistic as the context can be easily replaced with props in this case. But you should keep note about how it is structured: Wrap all child components inside the <code>with</code> statement, and use the context with <code>use_context</code>.</p>"},{"location":"quickstart/installation/","title":"Installation","text":""},{"location":"quickstart/installation/#requirements","title":"Requirements","text":"<p>You will need Python 3.12. This is required because the source code uses new syntax for type parameter (PEP 695)</p>"},{"location":"quickstart/installation/#install","title":"Install","text":"<ul> <li>Install via git   <pre><code>pip install git+https://github.com/rorre/liku.git@main\n</code></pre></li> <li>PyPI (soon)   <pre><code>pip install liku\n</code></pre></li> </ul> <p>And you are good to go! Continue to writing your components</p>"},{"location":"quickstart/integration/","title":"Integrations With Web Frameworks","text":"<p>After you have known how to create components, it is time to integrate with your beloved web frameworks! Below are guides to get you started to using Liku with various web frameworks:</p>"},{"location":"quickstart/integration/#django","title":"Django","text":"<p>Support is available out of the box. You can return the component in your view function with HttpResponse:</p> views.py<pre><code>import liku as e\nfrom django.http import HttpRequest, HttpResponse\n\ndef hello_world(request: HttpRequest):\n    return HttpResponse(\n        e.div(\n            props={\"class_\": \"mx-auto container\"},\n            children=e.p(children=\"Hello world!\")\n        )\n    )\n</code></pre> <p>Django will automatically convert the component to HTML.</p>"},{"location":"quickstart/integration/#flask","title":"Flask","text":"<p>Liku provides the decorator <code>@component</code> in <code>liku.integrations.flask</code> to automatically convert Liku components to Flask response.</p> app.py<pre><code>import liku as e\nfrom liku.integrations.flask import component\n\n# ...\n\n@app.get(\"/\")\n@component\ndef hello_world():\n    return e.div(\n        props={\"class_\": \"mx-auto container\"},\n        children=e.p(children=\"Hello world!\")\n    )\n</code></pre> <p>Just like regular Flask view, you are still able to return your status code and headers in the response as tuple as well. What matters is that the first value of return must be the component.</p>"},{"location":"quickstart/integration/#starlette-fastapi","title":"Starlette / FastAPI","text":"<p>Support is available out of the box. You can return the component in your view function with HTMLResponse</p> app.py<pre><code>import liku as e\n\n# ...\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def hello_world():\n    return e.div(\n        props={\"class_\": \"mx-auto container\"},\n        children=e.p(children=\"Hello world!\")\n    )\n</code></pre> <p>Starlette or FastAPI convert the component to HTML.</p>"}]}